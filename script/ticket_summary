#!/usr/bin/env ruby
require File.dirname(__FILE__) + '/../config/boot'
require RAILS_ROOT + '/config/environment'

completed_line_items = Order.all(:include => [:paypal_payment_notification, {:line_items => :product_item}],:conditions => {:ruby_kaigi_id => RubyKaigi.latest.id}).select{|o| o.completed? }.map{|o| o.line_items }.flatten;nil

completed_line_items_group_by_item_code = completed_line_items.group_by {|i| i.product_item.item_code }
by_code = completed_line_items_group_by_item_code.map do |(code, items)|
  count_by_date =items.group_by {|i| i.updated_at.to_date}.map {|date, arr| {date => arr.size}}
  { code => count_by_date }
end;nil

puts "=" * 78
now_in_jst =  ActiveSupport::TimeWithZone.new(Time.now.utc, TZInfo::Timezone.get("Asia/Tokyo")).to_s
puts "  Item Code Summary on #{now_in_jst}"
puts "=" * 78
puts ""
by_code.each do |row|
  item_code = row.keys.first
  by_date = row.values.first
  puts "* #{item_code}"
  total = 0
  by_date.each do |date_row|
    date = date_row.keys.first.strftime('%Y-%m-%d')
    count = date_row.values.first
    total += count
    count_disp = "%3d" % count
    puts "  - #{date}: #{count_disp}"
  end
  puts "  - #{'%10s' % 'total'}: #{'%3d' % total}"
  puts ""
end;nil

puts "-" * 78
puts " tickets stock summary"
puts "-" * 78
kaigi = RubyKaigi.latest
puts "RubyKaigi #{kaigi.year} Kaigi: stock: #{ProductItem.kaigi(kaigi.year).rk11.stock}"
puts "RubyKaigi #{kaigi.year} Party: stock: #{ProductItem.kaigi(kaigi.year).rk11_party.stock}"

is = OrderItem.all(:include => {:order => :paypal_payment_notification}, :conditions => {:product_item_id => ProductItem.find_by_item_code("rk11_individual_sponsor"), "paypal_payment_notifications.payment_status" => "Completed"}).map{|i| ActiveSupport::JSON.decode(i.order.paypal_payment_notification.notified_params_as_json)};is_gross = is.inject(0){|sum,n| sum + Integer(n["mc_gross"])};is_fee = is.inject(0){|sum,n| sum + Integer(n["mc_fee"])};k = ProductItem.kaigi(2011);

def num_with_delim(price)
 price.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\1,').reverse
end

puts "RubyKaigi #{kaigi.year} Individual Sponsor:"
puts "- gross: #{num_with_delim(is_gross)}JPY"
puts "- fee  : #{num_with_delim(is_fee)}JPY"
puts "- total: #{num_with_delim(is_gross - is_fee)}JPY"

puts ""
puts "residence_country rough summary(rk11 and rk11_indeividual_sponsor):"

residence_country = Paypal::PaymentNotification.where("created_at >=?", Date.parse('2011-01-01')).order("created_at").
  map{|n| ActiveSupport::JSON.decode(n.notified_params_as_json)}.select{|j| j["payment_status"] == "Completed"}.
  map{|j| j.keys.grep(/item_number/).map{|k| (j[k] =~ /\Ark11\z/ || j[k] =~ /\Ark11_individual_sponsor\z/)? j : nil}}.flatten.compact.
  map{|j|j["residence_country"]}.map.group_by{|e|e}.map{|(k,v)| {k => v.size}}.sort_by{|e| e.values[0]}.reverse

p residence_country
